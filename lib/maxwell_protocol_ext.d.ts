import * as root from "./maxwell_protocol";
export declare const msg_types: typeof root.maxwell.protocol;
export declare function encode_msg(msg: any): Uint8Array;
export declare function decode_msg(msg: ArrayBuffer): any;
declare const _default: {
    encode_msg: typeof encode_msg;
    decode_msg: typeof decode_msg;
    msg_type_t: typeof root.maxwell.protocol.msg_type_t;
    ping_req_t: typeof root.maxwell.protocol.ping_req_t;
    ping_rep_t: typeof root.maxwell.protocol.ping_rep_t;
    pull_req_t: typeof root.maxwell.protocol.pull_req_t;
    pull_rep_t: typeof root.maxwell.protocol.pull_rep_t;
    push_req_t: typeof root.maxwell.protocol.push_req_t;
    push_rep_t: typeof root.maxwell.protocol.push_rep_t;
    do_req_t: typeof root.maxwell.protocol.do_req_t;
    do_rep_t: typeof root.maxwell.protocol.do_rep_t;
    do2_req_t: typeof root.maxwell.protocol.do2_req_t;
    do2_rep_t: typeof root.maxwell.protocol.do2_rep_t;
    auth_req_t: typeof root.maxwell.protocol.auth_req_t;
    auth_rep_t: typeof root.maxwell.protocol.auth_rep_t;
    ok_rep_t: typeof root.maxwell.protocol.ok_rep_t;
    error_rep_t: typeof root.maxwell.protocol.error_rep_t;
    ok2_rep_t: typeof root.maxwell.protocol.ok2_rep_t;
    error2_rep_t: typeof root.maxwell.protocol.error2_rep_t;
    watch_req_t: typeof root.maxwell.protocol.watch_req_t;
    watch_rep_t: typeof root.maxwell.protocol.watch_rep_t;
    unwatch_req_t: typeof root.maxwell.protocol.unwatch_req_t;
    unwatch_rep_t: typeof root.maxwell.protocol.unwatch_rep_t;
    register_frontend_req_t: typeof root.maxwell.protocol.register_frontend_req_t;
    register_frontend_rep_t: typeof root.maxwell.protocol.register_frontend_rep_t;
    add_route_req_t: typeof root.maxwell.protocol.add_route_req_t;
    add_route_rep_t: typeof root.maxwell.protocol.add_route_rep_t;
    delete_route_req_t: typeof root.maxwell.protocol.delete_route_req_t;
    delete_route_rep_t: typeof root.maxwell.protocol.delete_route_rep_t;
    add_route_msg_t: typeof root.maxwell.protocol.add_route_msg_t;
    delete_route_msg_t: typeof root.maxwell.protocol.delete_route_msg_t;
    push_routes_req_t: typeof root.maxwell.protocol.push_routes_req_t;
    push_routes_rep_t: typeof root.maxwell.protocol.push_routes_rep_t;
    pull_routes_req_t: typeof root.maxwell.protocol.pull_routes_req_t;
    pull_routes_rep_t: typeof root.maxwell.protocol.pull_routes_rep_t;
    delete_topics_req_t: typeof root.maxwell.protocol.delete_topics_req_t;
    delete_topics_rep_t: typeof root.maxwell.protocol.delete_topics_rep_t;
    register_backend_req_t: typeof root.maxwell.protocol.register_backend_req_t;
    register_backend_rep_t: typeof root.maxwell.protocol.register_backend_rep_t;
    resolve_frontend_req_t: typeof root.maxwell.protocol.resolve_frontend_req_t;
    resolve_frontend_rep_t: typeof root.maxwell.protocol.resolve_frontend_rep_t;
    resolve_backend_req_t: typeof root.maxwell.protocol.resolve_backend_req_t;
    resolve_backend_rep_t: typeof root.maxwell.protocol.resolve_backend_rep_t;
    resolve_ip_req_t: typeof root.maxwell.protocol.resolve_ip_req_t;
    resolve_ip_rep_t: typeof root.maxwell.protocol.resolve_ip_rep_t;
    msg_t: typeof root.maxwell.protocol.msg_t;
    source_t: typeof root.maxwell.protocol.source_t;
    trace_t: typeof root.maxwell.protocol.trace_t;
    route_group_t: typeof root.maxwell.protocol.route_group_t;
    msg_types: typeof root.maxwell.protocol;
};
export default _default;
